import { supabase } from './supabaseClient'

// üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function signUp(email, password) {
  const { data, error } = await supabase.auth.signUp({
    email,
    password
  })

  if (error) {
    console.error('‚ùå Registration failed:', error.message)
    throw error
  }

  console.log('‚úÖ Registration successful:', data)
  return data
}

// üîë –õ–æ–≥–∏–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function signIn(email, password) {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password
  })

  if (error) {
    console.error('‚ùå Login failed:', error.message)
    throw error
  }

  console.log('‚úÖ Login successful:', data)
  return data
}

// üîë –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
export async function resetPassword(email) {
  try {
    console.log('üìß Sending password reset email to:', email)

    const { data, error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: 'your-app://reset-password', // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ deep link –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    })

    if (error) {
      console.error('‚ùå Password reset failed:', error.message)
      throw error
    }

    console.log('‚úÖ Password reset email sent successfully')
    return { success: true, data }
  } catch (error) {
    console.error('‚ùå Password reset error:', error)
    throw error
  }
}

// üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
export async function signOut() {
  try {
    console.log('üîÑ Attempting to sign out from Supabase...')

    // First, get the current session to verify we're logged in
    const { data: { session } } = await supabase.auth.getSession()
    if (!session) {
      console.log('‚ÑπÔ∏è No active session found, already signed out')
      return { success: true }
    }

    console.log('üë§ Current session found for user:', session.user?.email)

    // Now sign out - this will clear the session and trigger the auth state change
    const { error } = await supabase.auth.signOut()
    if (error) {
      console.error('‚ùå Supabase sign out failed:', error.message)
      throw error
    }

    // üßπ –ñ–µ—Å—Ç–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage –¥–ª—è –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è)
    if (typeof window !== 'undefined' && window.localStorage) {
      console.log('üßπ Force cleaning localStorage...')

      // –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã Supabase
      localStorage.removeItem('supabase.auth.token')
      localStorage.removeItem('sb-auth-token')

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 'sb-'
      Object.keys(localStorage)
        .filter(key => key.startsWith('sb-'))
        .forEach(key => {
          console.log(`üóëÔ∏è Removing localStorage key: ${key}`)
          localStorage.removeItem(key)
        })

      console.log('‚úÖ localStorage cleaned successfully')
    }

    console.log('‚úÖ Successfully signed out from Supabase')
    return { success: true }
  } catch (error) {
    console.error('‚ùå Sign out error:', error)
    throw error
  }
}

// üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getCurrentUser() {
  const { data, error } = await supabase.auth.getUser()

  if (error) {
    console.error('‚ö†Ô∏è Failed to get user:', error.message)
    return null
  }

  return data?.user || null
}

// üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å logout
export async function diagnoseAuth() {
  try {
    console.log('üîç Diagnosing authentication state...')

    // Check current session
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    console.log('üìã Session status:', session ? 'Active' : 'None')
    if (sessionError) {
      console.error('‚ùå Session error:', sessionError.message)
    }

    // Check current user
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    console.log('üë§ Current user:', user ? user.email : 'None')
    if (userError) {
      console.error('‚ùå User error:', userError.message)
    }

    // Check storage (both web and React Native)
    const storageKeys = []
    if (typeof window !== 'undefined' && window.localStorage) {
      // Web browser
      const keys = Object.keys(localStorage).filter(key => key.includes('supabase'))
      console.log('üíæ Supabase localStorage keys:', keys)
      storageKeys.push(...keys)
    }

    // Check AsyncStorage for React Native (if available)
    if (typeof AsyncStorage !== 'undefined') {
      try {
        const asyncKeys = await AsyncStorage.getAllKeys()
        const supabaseAsyncKeys = asyncKeys.filter(key => key.includes('supabase') || key.startsWith('sb-'))
        console.log('üíæ Supabase AsyncStorage keys:', supabaseAsyncKeys)
        storageKeys.push(...supabaseAsyncKeys)
      } catch (e) {
        console.log('‚ÑπÔ∏è AsyncStorage not available or error:', e.message)
      }
    }

    return {
      hasSession: !!session,
      hasUser: !!user,
      sessionError: sessionError?.message,
      userError: userError?.message,
      storageKeys: storageKeys
    }
  } catch (error) {
    console.error('‚ùå Auth diagnosis error:', error)
    return { error: error.message }
  }
}
